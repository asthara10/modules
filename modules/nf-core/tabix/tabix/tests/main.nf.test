nextflow_process {

    name "Test Process TABIX_TABIX"
    script "../main.nf"
    config "./nextflow.config"
    process "TABIX_TABIX"

    tag "modules"
    tag "modules_nfcore"
    tag "tabix"
    tag "tabix/tabix"

    test("test_tabix_tabix_bed") {


        when {
            process {
                """
                
                input[0] = [ [ id:'B.bed' ], // meta map
              [ file(params.test_data['sarscov2']['genome']['test_bed_gz'], checkIfExists: true) ] 
            ]

    TABIX_BED ( input )
}

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_tabix_tabix_gff") {
        when {
            process {
                """
                        input[0] = [ [ id:'test' ], // meta map
              [ file(params.test_data['sarscov2']['genome']['genome_gff3_gz'], checkIfExists: true) ] 
            ]

    TABIX_GFF ( input )
}


                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    test("test_tabix_tabix_vcf_tbi") {
        when {
            process {
                """
                        input[0] = [ [ id:'test.vcf' ], // meta map
              [ file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true) ] 
            ]

    TABIX_VCF_TBI ( input )
}


                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    test("test_tabix_tabix_vcf_csi") {
        when {
            process {
                """
                        input[0] = [ [ id:'test.vcf' ], // meta map
              [ file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true) ]
            ]

    TABIX_VCF_CSI ( input )
}

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") }
                { assert snapshot(process.out).match() }
            )
        }
    }
    
}
